// Code generated by MockGen. DO NOT EDIT.
// Source: internal/checker/api/api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTelegramClient is a mock of TelegramClient interface.
type MockTelegramClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramClientMockRecorder
}

// MockTelegramClientMockRecorder is the mock recorder for MockTelegramClient.
type MockTelegramClientMockRecorder struct {
	mock *MockTelegramClient
}

// NewMockTelegramClient creates a new mock instance.
func NewMockTelegramClient(ctrl *gomock.Controller) *MockTelegramClient {
	mock := &MockTelegramClient{ctrl: ctrl}
	mock.recorder = &MockTelegramClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramClient) EXPECT() *MockTelegramClientMockRecorder {
	return m.recorder
}

// GetChatMember mocks base method.
func (m *MockTelegramClient) GetChatMember(botToken, channelLink string, userId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMember", botToken, channelLink, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMember indicates an expected call of GetChatMember.
func (mr *MockTelegramClientMockRecorder) GetChatMember(botToken, channelLink, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMember", reflect.TypeOf((*MockTelegramClient)(nil).GetChatMember), botToken, channelLink, userId)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepository) AddUser(userId, channelID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", userId, channelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryMockRecorder) AddUser(userId, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), userId, channelID)
}
